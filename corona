#!/bin/sh
#
## @file corona
## @brief 1. IOS Project
## @details Script for the analysis of records of persons with proven COVID-19 coronavirus infection
## @date 2022-03-30
##

export POSIXLY_CORRECT=yes
export LANG=en_GB.UTF-8
export LC_NUMERIC=en_GB.UTF-8

## @section Custom_functions
## @fn print_help() Help
##
print_help() {
    echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo " "
    echo " Command             Meaning"
    echo "  infected            Count the total number of infected"
    echo "  merge               Merge multiple CSV files to one"
    echo "  gender              Show number of infected by gender"
    echo "  age                 Show number of infected by age category"
    echo "  countries           Show number of infected by country of infection"
    echo "  districts           Show number of infected by CZ district"
    echo "  regions             Show number of infected by CZ region"
    echo "  daily               Show daily infection trend"
    echo "  monthly             Show monthly infection trend"
    echo "  yearly              Show yearly infection trend"
    echo " "
    echo " Filter              Meaning"
    echo "  -a <date>           Show cases only after given date (including)"
    echo "  -b <date>           Show cases only before given date (including)"
    echo "  -g <gender>         Show cases only of given gender (M for male, Z for female)"
    echo "  -s [width]          Display data as a histogram"
    echo " "
    echo " All dates are expected to be in YYYY-MM-DD format."
}

## @section Parameter_variables
## @var $command Command to execute
## @var $date_start Starting date filter (-a)
## @var $date_end Ending date filter (-b)
## @var $gender Gender filter (-g)
## @var $histogram_width Max. histogram width, default: 0
##
command=""
date_start=""
date_end=""
gender=""
histogram_width=""

## @subsection File_variables
## @var $header CSV header
## @var $log All records to process
##
header="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
log=""

## @section Input_processing
##
while [ "$#" -gt 0 ]; do
    case "$1" in
    ## @subsection Help(-h)
    ## @brief Prints help text and ends the program
    ##
    -h)
        print_help
        exit 0
    ;;
    ## @subsection Command
    ## @brief Stores the command name to execute (only one allowed)
    ##
    infected | merge | gender | age | countries | districts | regions | daily | monthly | yearly)
        if [ -z "$command" ]; then 
            command="$1"
        else
            1>&2 echo "Too many commands (max 1)! For help, see: corona -h"
            exit 1
        fi
        shift
        ;;
    ## @subsection Filters
    ## @subsubsection After(-a)
    ## @brief Filters entries by starting date
    ##
    -a)
        if [ -z "$date_start" ]; then
            if [ "$(date --date="$2" "+%Y-%m-%d" 2>/dev/null)" = "$2" ]; then
                date_start="$2"
            else
                1>&2 echo "Invalid date format at -a filter! For help, see: corona -h"
                exit 1
            fi
        else
            1>&2 echo "Filter -a can only be set once! For help, see: corona -h"
            exit 1
        fi
        shift
        shift
        ;;
    ## @subsubsection Before(-b)
    ## @brief Filters entries by ending date
    ##
    -b)
        if [ -z "$date_end" ]; then
            if [ "$(date --date="$2" "+%Y-%m-%d" 2>/dev/null)" = "$2" ]; then
                date_end="$2"
            else
                1>&2 echo "Invalid date format at -b filter! For help, see: corona -h"
                exit 1
            fi
        else
            1>&2 echo "Filter -b can only be set once! For help, see: corona -h"
            exit 1
        fi
        shift
        shift
        ;;
    ## @subsubsection Gender(-g)
    ## @brief Filters gender (M / Z)
    ##
    -g)
        if [ -z "$gender" ]; then
            if [ "$2" = "M" ] || [ "$2" = "m" ]; then
                gender="M"
            elif [ "$2" = "Z" ] || [ "$2" = "z" ]; then
                gender="Z"
            else
                1>&2 echo "Filter -g can only be set to M or Z! For help, see: corona -h"
                exit 1
            fi
        else
            1>&2 echo "Filter -g can only be set once! For help, see: corona -h"
            exit 1
        fi
        shift
        shift
        ;;
    ## @subsubsection Graph(-s)
    ## @brief Enables histogram display and sets its width (if set)
    ##
    -s)
        if [ -z "$histogram_width" ]; then
            if [ "$2" -eq "$2" ] 2>/dev/null; then
                if [ "$2" -gt 0 ]; then
                    histogram_width="$2"
                    shift
                else 
                    1>&2 echo "-s parameter must be a positive integer! For help, see: corona -h"
                    exit 1
                fi
            else
                histogram_width="0"
            fi
        else 
            1>&2 echo "Filter -s can only be set once! For help, see: corona -h"
            exit 1
        fi
        shift
        ;;
    ## @subsection Files
    ## @subsubsection CSV(*.csv)
    ##
    *.csv)
        if [ -r "$1" ]; then
            if [ -z "$log" ]; then
                log=$(< "$1" sed 1d)
            else
                log=$(echo "$log" && (< "$1" sed 1d))
            fi
        else
            1>&2 echo "Input file not found or not readable!"
            exit 1
        fi
        shift
        ;;
    ## @subsubsection Compressed_CSV(*.gz/*.gz2/*.bz2)
    ##
    *.gz)
        if [ -r "$1" ]; then
            if [ -z "$log" ]; then
                log=$(gzip -d -c "$1" | sed 1d)
            else
                log=$(echo "$log" && (gzip -d -c "$1" | sed 1d))
            fi
        else
            1>&2 echo "Input file not found or not readable!"
            exit 1
        fi
        shift
        ;;
    *.gz2)
        if [ -r "$1" ]; then
            if [ -z "$log" ]; then
                log=$(gzip -d -c "$1" | sed 1d)
            else
                log=$(echo "$log" && (gzip -d -c "$1" | sed 1d))
            fi
        else
            1>&2 echo "Input file not found or not readable!"
            exit 1
        fi
        shift
        ;;
    *.bz2)
        if [ -r "$1" ]; then
            if [ -z "$log" ]; then
                log=$(bzip2 -d -c -k "$1" | sed 1d)
            else
                log=$(echo "$log" && ( bzip2 -d -c -k "$1" | sed 1d))
            fi
        else
            1>&2 echo "Input file not found or not readable!"
            exit 1
        fi
        shift
        ;;
    ## @subsubsection Other(Invalid)
    ##
    *)
        1>&2 echo "Illegal parameter detected! For help, see: corona -h"
        exit 1
        ;;
    esac
done

## @subsubsection STDIN
## @brief If no file was specified, the script waits for input on STDIN
##
if [ -z "$log" ]; then
    log=$(cat - | sed 1d)
fi

## @section Check_entries
##
IFS=$(printf '\n\t')
## @subsection Remove_empty_entries
##
log=$(echo "$log" | sed '/^[[:space:]]*$/d' | sed -r 's/[[:space:]]+//g')

## @subsection Check_date_and_age
##
log=$(echo "$log" | awk -F "," -v error_log="" '
function invalid_date(line) {
    error_log=error_log"\nInvalid date: "line
}
function invalid_age(line) {
    error_log=error_log"\nInvalid age: "line
}

## @subsubsection Leap year check
## @fn is_leap Checks if a year is a leap year
## @return int 1 if leap year, else 0
##
function is_leap(year) {
    if (year % 4 == 0) 
        if (year % 100 == 0) {
            if (year % 400 == 0)
                return 1
            } else {
                return 1
            }
    return 0
}

{
## @subsubsection Check_date
## @description Checks date format and if date really exists
##
    if ($2 != "") {
        split($2, date, "-")

        if (int(date[1]) != date[1] || int(date[2]) != date[2] || int(date[3]) != date[3]) {
            invalid_date($0)
            next
        }

        if (date[1] < 1 || date[2] < 1 || date[2] > 12 || date[3] < 1 || date[3] > 32) {
            invalid_date($0)
            next
        }

        if (date[2] == "01" || date[2] == "03" || date[2] == "05" || date[2] == "07" || date[2] == "08" || date[2] == "10" || date[2] == "12") {
            if (date[3] > 31) {
                invalid_date($0)
                next
            }
        } else if (date[2] == "04" || date[2] == "06" || date[2] == "09" || date[2] == "11") {
            if (date[3] > 30) {
                invalid_date($0)
                next
            }
        } else if (date[2] == "02") {
            leap = is_leap(date[1])
            if ((leap == 1 && date[3] > 29) || (leap == 0 && date[3] > 28)) {
                invalid_date($0)
                next
            }
        } else {
            invalid_date($0)
            next
        }
    }
    
    ## @subsubsection Check_age
    ## @description Age must be an integer or undefined
    ##
    if ($3 != "" && (int($3) != $3 || $3 < 0)) {
        invalid_age($0)
        next
    }

    print
} END {
    print(error_log)
}')

error_log=$(echo "$log" | grep "^Invalid")
log=$(echo "$log" | sed '/^Invalid/d')

## @section Filter_application
## @description Applying filters processed at the script start
## @subsection After(-a)
##
if [ "$date_start" ]; then
    log=$(echo "$log" | awk -F "," -v date="$date_start" '{
            if (date <= $2) {
                print $0
            }
        }')
fi
## @subsection Before(-b)
##
if [ "$date_end" ]; then
    log=$(echo "$log" | awk -F "," -v date="$date_end" '{
            if (date >= $2) {
                print $0
            }
        }')
fi
## @subsection Gender(-g)
##
if [ "$gender" ]; then
    log=$(echo "$log" | awk -F "," -v gender="$gender" '{
        if (gender == $4) {
            print $0
        }
    }')
fi

## @section Command_execution
## @var $out Command output
##
case "$command" in
    ## @subsection Infected
    ## @brief Count of infected persons
    ## 
    infected)
        echo "$log" | wc -l
        ;;
    ## @subsection Gender
    ## @brief Shows gender statistics of infected persons
    ## 
    gender)
        out=$(echo "$log" | awk -F "," \
        -v M=0 -v Z=0 -v none=0 \
        -v width="$histogram_width" 'BEGIN {
            for (i = 0; i <= 2; i++)
                genderstats[i] = 0
        } {
            if ($4 == "M" || $4 == "m")
                genderstats[0]++
            else if ($4 == "Z" || $4 == "z")
                genderstats[1]++
            else
                genderstats[2]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= 2; i++)
                        if (genderstats[i] > max)
                            max = genderstats[i]
                    weight = max/width
                } else {
                    weight = 100000    # Default value from assignment
                }

                for (i = 0; i <= 12; i++) {
                    count = int(genderstats[i] / weight)
                    genderstats[i] = ""
                    for (j = 0; j < count; j++)
                        genderstats[i] = genderstats[i]"#"
                }
            }

            printf("M: %s\n", genderstats[0])
            printf("Z: %s", genderstats[1])
            if (genderstats[2] != "" && genderstats[2] != 0)
                printf("\nNone: %s", genderstats[2])
        }')
        echo "$out"
        ;;
    ## @subsection Age
    ## @brief Shows age statistics of infected persons
    ## 
    age)
        out=$(echo "$log" | cut -f3 -d, | sort | awk -F "," \
            -v width="$histogram_width" 'BEGIN {
                for (i = 0; i <= 12; i++)
                    agestats[i] = 0
            } {
                if ($1 == "" || int($1) != $1)
                    agestats[0]++
                else if ($1 <= 5)
                    agestats[1]++
                else if ($1 <= 15)
                    agestats[2]++
                else if ($1 <= 25)
                    agestats[3]++
                else if ($1 <= 35)
                    agestats[4]++
                else if ($1 <= 45)
                    agestats[5]++
                else if ($1 <= 55)
                    agestats[6]++
                else if ($1 <= 65)
                    agestats[7]++
                else if ($1 <= 75)
                    agestats[8]++
                else if ($1 <= 85)
                    agestats[9]++
                else if ($1 <= 95)
                    agestats[10]++
                else if ($1 <= 105)
                    agestats[11]++
                else if ($1 > 105)
                    agestats[12]++
                else
                    agestats[0]++    # Should not happen
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= 12; i++)
                        if (agestats[i] > max)
                            max = agestats[i]
                    weight = max/width
                } else {
                    weight = 10000    # Default value from assignment
                }

                for (i = 0; i <= 12; i++) {
                    count = int(agestats[i] / weight)
                    agestats[i] = ""
                    for (j = 0; j < count; j++)
                        agestats[i] = agestats[i]"#"
                }
            }

            printf("0-5   : %s\n", agestats[1])
            printf("6-15  : %s\n", agestats[2])
            printf("16-25 : %s\n", agestats[3])
            printf("26-35 : %s\n", agestats[4])
            printf("36-45 : %s\n", agestats[5])
            printf("46-55 : %s\n", agestats[6])
            printf("56-65 : %s\n", agestats[7])
            printf("66-75 : %s\n", agestats[8])
            printf("76-85 : %s\n", agestats[9])
            printf("86-95 : %s\n", agestats[10])
            printf("96-105: %s\n", agestats[11])
            printf(">105  : %s", agestats[12])
            if (agestats[0] != "" && agestats[0] != 0)
                printf("\nNone  : %s", agestats[0])
        }')
        echo "$out"
        ;;
    ## @subsection Countries
    ## @brief Shows stats of countries of infection (outside Czechia)
    ## 
    countries)
        out=$(echo "$log" | cut -f8 -d, | sort | sed '/CZ/d' | sed '/^[[:space:]]*$/d' | awk \
        -v width="$histogram_width" -v arrLength=-1 '{
            if (lastLine != $1) {
                arrLength++
                countryKeys[arrLength] = $1
                countryValues[arrLength] = 1
                lastLine = $1
            } else {
                countryValues[arrLength]++
            }
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (countryValues[i] > max)
                            max = countryValues[i]
                    weight = max/width
                } else {
                    weight = 100    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(countryValues[i]/weight)
                    countryValues[i] = ""
                    for (j = 0; j < count; j++)
                        countryValues[i] = countryValues[i]"#"
                }
            }

            for (i = 0; i <= arrLength; i++)
                printf("%s: %s\n", countryKeys[i], countryValues[i])
        }' )
        echo "$out"
        ;;
    ## @subsection Districts
    ## @brief Shows stats of districts of infected persons
    ## 
    districts)
        out=$(echo "$log" | cut -f6 -d, | sort | awk \
        -v width="$histogram_width" -v arrLength=0 '{
            if (lastLine != $1) {
                arrLength++
                districtKeys[arrLength] = $1
                districtValues[arrLength] = 1
                lastLine = $1
            } else
                districtValues[arrLength]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (districtValues[i] > max)
                            max = districtValues[i]
                    weight = max/width
                } else {
                    weight = 1000    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(districtValues[i]/weight)
                    districtValues[i] = ""
                    for (j = 0; j < count; j++)
                        districtValues[i] = districtValues[i]"#"
                }
            }

            for (i = 1; i <= arrLength; i++)
                printf("%s: %s\n", districtKeys[i], districtValues[i])
            if (districtValues[0] > 0)
                printf("None: %s", districtValues[0])
        }')
        echo "$out"
        ;;
    ## @subsection Regions
    ## @brief Shows stats of regions of infected persons
    ## 
    regions)
        out=$(echo "$log" | cut -f5 -d, | sort | awk \
        -v width="$histogram_width" -v arrLength=0 '{
            if (lastLine != $1) {
                arrLength++
                regionKeys[arrLength] = $1
                regionValues[arrLength] = 1
                lastLine = $1
            } else
                regionValues[arrLength]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (regionValues[i] > max)
                            max = regionValues[i]
                    weight = max/width
                } else {
                    weight = 10000    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(regionValues[i]/weight)
                    regionValues[i] = ""
                    for (j = 0; j < count; j++)
                        regionValues[i] = regionValues[i]"#"
                }
            }

            for (i = 1; i <= arrLength; i++)
                printf("%s: %s\n", regionKeys[i], regionValues[i])
            if (regionValues[0] > 0)
                printf("None: %s", regionValues[0])
        }')
        echo "$out"
        ;;
    ## @subsection Daily
    ## @brief Shows stats for daily infection cases
    ## 
    daily)
        out=$(echo "$log" | cut -f2 -d "," | sort | awk \
        -v width="$histogram_width" -v arrLength=0 '{
            if (lastLine != $1) {
                arrLength++
                days[arrLength] = $1
                daysValues[arrLength] = 1
                lastLine = $1
            } else
                daysValues[arrLength]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (daysValues[i] > max)
                            max = daysValues[i]
                    weight = max/width
                } else {
                    weight = 500    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(daysValues[i]/weight)
                    daysValues[i] = ""
                    for (j = 0; j < count; j++)
                        daysValues[i] = daysValues[i]"#"
                }
            }

            for (i = 1; i <= arrLength; i++)
                printf("%s: %s\n", days[i], daysValues[i])
            if (daysValues[0] > 0)
                printf("None: %s", daysValues[0])
        }')
        echo "$out"
        ;;
    ## @subsection Monthly
    ## @brief Shows monthly stats of infection cases
    ## 
    monthly)
        out=$(echo "$log" | cut -f2 -d "," | cut -f1,2 -d "-" | sort | awk \
        -v width="$histogram_width" -v arrLength=0 '{
            if (lastLine != $1) {
                arrLength++
                months[arrLength] = $1
                monthsValues[arrLength] = 1
                lastLine = $1
            } else
                monthsValues[arrLength]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (monthsValues[i] > max)
                            max = monthsValues[i]
                    weight = max/width
                } else {
                    weight = 10000    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(monthsValues[i]/weight)
                    monthsValues[i] = ""
                    for (j = 0; j < count; j++)
                        monthsValues[i] = monthsValues[i]"#"
                }
            }

            for (i = 1; i <= arrLength; i++)
                printf("%s: %s\n", months[i], monthsValues[i])
            if (monthsValues[0] > 0)
                printf("None: %s", monthsValues[0])
        }')
        echo "$out"
        ;;
    ## @subsection Yearly
    ## @brief Shows yearly stats of infection cases
    ## 
    yearly)
        out=$(echo "$log" | cut -f2 -d "," | cut -f1 -d "-" | sort | awk \
        -v width="$histogram_width" -v arrLength=0 '{
            if (lastLine != $1) {
                arrLength++
                years[arrLength] = $1
                yearsValues[arrLength] = 1
                lastLine = $1
            } else
                yearsValues[arrLength]++
        } END {
            if (width != "") {
                weight = 0
                if (width > 0) {
                    max = 0
                    for (i = 0; i <= arrLength; i++)
                        if (yearsValues[i] > max)
                            max = yearsValues[i]
                    weight = max/width
                } else {
                    weight = 100000    # Default value from assignment
                }

                for (i = 0; i <= arrLength; i++) {
                    count = int(yearsValues[i]/weight)
                    yearsValues[i] = ""
                    for (j = 0; j < count; j++)
                        yearsValues[i] = yearsValues[i]"#"
                }
            }

            for (i = 1; i <= arrLength; i++)
                printf("%s: %s\n", years[i], yearsValues[i])
            if (yearsValues[0] > 0)
                printf("None: %s", yearsValues[0])
        }')
        echo "$out"
        ;;
    ## @subsection Merge/*
    ## @brief Prints all entries
    ## 
    merge | *)
        echo "$header"
        if [ "$log" ]; then
            echo "$log"
        fi
        ;;
esac

## @section Print_invalid_entries
##
if [ "$error_log" ]; then
    echo "$error_log" >&2
fi

exit 0
